package org.kaddiya.mqgror

import com.fasterxml.jackson.databind.ObjectMapper
import com.google.inject.Guice
import com.google.inject.Injector
import groovy.json.JsonBuilder
import groovy.json.JsonParser
import groovy.transform.CompileStatic
import groovy.util.logging.Slf4j
import org.apache.kafka.clients.consumer.ConsumerRecord
import org.apache.kafka.clients.consumer.ConsumerRecords
import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.common.serialization.StringDeserializer
import org.kaddiya.grorchestrator.guice.DeserialiserModule
import org.kaddiya.grorchestrator.guice.DockerRemoteAPIModule
import org.kaddiya.grorchestrator.guice.GrorchestratorModule
import org.kaddiya.grorchestrator.guice.HelperModule
import org.kaddiya.grorchestrator.guice.factory.DockerContainerActionFactory
import org.kaddiya.grorchestrator.managers.DockerRemoteAPI
import org.kaddiya.grorchestrator.managers.interfaces.DockerRemoteInterface
import org.kaddiya.grorchestrator.models.HostType
import org.kaddiya.grorchestrator.models.core.SupportedContainerActions
import org.kaddiya.grorchestrator.models.core.latest.Host
import org.kaddiya.grorchestrator.models.core.latest.Instance
import org.kaddiya.mqgror.models.kafka.RequestMessage
import org.kaddiya.mqgror.tasks.OrchestrationTask

import java.util.concurrent.ExecutionException
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.Future

/*
 * This Groovy source file was auto generated by running 'gradle buildInit --type groovy-library'
 * by 'Webonise' at '22/2/17 6:02 PM' with Gradle 2.3
 *
 * @author Webonise, @date 22/2/17 6:02 PM
 */
@CompileStatic
@Slf4j
class MQGror {


    public static void main(String[] args){
        ExecutorService orchestratorService = Executors.newFixedThreadPool(10);
        Long taskId = 0;
        Properties props = new Properties();
        props.put("bootstrap.servers", "localhost:9092");
        props.put("group.id", "some!");
        props.put("key.deserializer", StringDeserializer.class.getName());
        props.put("value.deserializer", StringDeserializer.class.getName());
        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);


        List<String> topics = Arrays.asList("test")

        consumer.subscribe(topics)

        while(true){
            ConsumerRecords<String, String> records = consumer.poll(10);
            for (ConsumerRecord<String, String> record : records) {

               // log.info(getJson())
                Map<String, Object> data = new HashMap<>();
                data.put("partition", record.partition());
                data.put("offset", record.offset());
                data.put("value", record.value());
                SupportedContainerActions action
                try {
                     action = SupportedContainerActions.valueOf(record.value())
                }catch (Exception e){
                    log.warn("Incorrect value found")
                    continue;
                }

               /* ObjectMapper mapper = new ObjectMapper();
                RequestMessage message ;

                message = mapper.readValue(record.value().bytes,RequestMessage.class)
                assert  message
                assert message.host
                assert  message.instance*/

                OrchestrationTask task = new OrchestrationTask(++taskId,getHost(),getInstance(),action)
                Future result = orchestratorService.submit(task)
                try {
                    result.get()
                    log.info("tasks with id : {} has been executed {}",result.get().taskId,result.get().sucess)
                }
                catch (ExecutionException e){
                    log.error("Something went wrong in the execution of task with id {}",taskId,e.getCause())
                }

            }
        }


    }

    static Host getHost(){
        return new Host("localhost","demo",2376,"http","","",null,HostType.UNIX)
    }

    static Instance getInstance(){
        return new Instance("redis.proof.com","redis","latest",null,"default",Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_LIST,"")
    }

    static String getJson(){
       // new JsonBuilder(new RequestMessage("someId",new Host("localhost","demo",2376,"http","","",null,HostType.UNIX),new Instance("redis.proof.com","redis","latest",null,"default",Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_LIST,""))).toPrettyString()
    }
}
