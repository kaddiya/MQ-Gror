package org.kaddiya.mqgror

import com.fasterxml.jackson.databind.ObjectMapper
import com.google.common.util.concurrent.Futures
import com.google.common.util.concurrent.ListenableFuture
import com.google.common.util.concurrent.ListeningExecutorService
import com.google.common.util.concurrent.MoreExecutors
import groovy.transform.CompileStatic
import groovy.util.logging.Slf4j
import org.apache.kafka.clients.consumer.ConsumerRecord
import org.apache.kafka.clients.consumer.ConsumerRecords
import org.apache.kafka.clients.consumer.KafkaConsumer
import org.apache.kafka.common.serialization.StringDeserializer
import org.kaddiya.grorchestrator.models.HostType
import org.kaddiya.grorchestrator.models.core.SupportedContainerActions
import org.kaddiya.grorchestrator.models.core.latest.Host
import org.kaddiya.grorchestrator.models.core.latest.Instance
import org.kaddiya.mqgror.models.kafka.RequestMessage
import org.kaddiya.mqgror.models.kafka.internal.OrchestrationResult
import org.kaddiya.mqgror.tasks.OrchestrationTask
import org.kaddiya.mqgror.tasks.OrchestrationTaskCallBack

import java.util.concurrent.Executors

/*
 * This Groovy source file was auto generated by running 'gradle buildInit --type groovy-library'
 * by 'Webonise' at '22/2/17 6:02 PM' with Gradle 2.3
 *
 * @author Webonise, @date 22/2/17 6:02 PM
 */

@CompileStatic
@Slf4j
class MQGror {


    public static void main(String[] args) {
        ListeningExecutorService orchestratorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(10));

        Long taskId = 0;
        Properties props = new Properties();
        //source the broker url from Env properties
        props.put("bootstrap.servers", "localhost:9092");
        //source the group id from env properties
        props.put("group.id", "some!");
        props.put("key.deserializer", StringDeserializer.class.getName());
        props.put("value.deserializer", StringDeserializer.class.getName());
        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);

        //source the topic name from the Env variables
        //Also the secret key and access token needs to be supplied
        List<String> topics = Arrays.asList("test")

        consumer.subscribe(topics)

        while (true) {
            ConsumerRecords<String, String> records = consumer.poll(10);
            for (ConsumerRecord<String, String> record : records) {

                Map<String, Object> data = new HashMap<>();
                data.put("partition", record.partition());
                data.put("offset", record.offset());
                data.put("value", record.value());
                log.info(record.value())
                SupportedContainerActions action

                ObjectMapper mapper = new ObjectMapper();
                RequestMessage message;
                try {
                    message = mapper.readValue(record.value().bytes, RequestMessage.class)
                } catch (Exception e) {
                    log.warn("Error occured in deserialing a message", e)
                    continue;
                }

                //further steps is to decrypt the message using the secret key and derive the message
                ListenableFuture
                assert message
                assert message.host
                assert message.instance


                OrchestrationTask task = new OrchestrationTask(++taskId, message.host, message.instance, message.action)
                ListenableFuture<OrchestrationResult> listenableFuture = orchestratorService.submit(task)
                //Future result = orchestratorService.submit(task)

                Futures.addCallback(listenableFuture, new OrchestrationTaskCallBack())
                /*  try {
                      result.get()
                      log.info("tasks with id : {} has been executed {}", result.get().taskId, result.get().sucess)
                  }
                  catch (ExecutionException e) {
                      log.error("Something went wrong in the execution of task with id {}", taskId, e.getCause())
                  }
              */
            }
        }


    }

    static Host getHost() {
        return new Host("localhost", "demo", 2376, "http", "", "", null, HostType.UNIX)
    }

    static Instance getInstance() {
        return new Instance("redis.proof.com", "redis", "latest", null, "default", Collections.EMPTY_MAP, Collections.EMPTY_MAP, Collections.EMPTY_MAP, Collections.EMPTY_MAP, Collections.EMPTY_MAP, Collections.EMPTY_LIST, "")
    }

    static String getJson() {
        // new JsonBuilder(new RequestMessage("someId",new Host("localhost","demo",2376,"http","","",null,HostType.UNIX),new Instance("redis.proof.com","redis","latest",null,"default",Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_MAP,Collections.EMPTY_LIST,""))).toPrettyString()
    }
}
